/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AUTHOR Rumesh Eranga
 * Home.java
 *
 * Created on Jul 12, 2012, 11:55:04 PM
 */
package sqlmonitor;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;


public class Home extends javax.swing.JFrame {

    public static Connection c;

    /** Creates new form Home */
    public Home() {
        initComponents();
        setLocationRelativeTo(null);
        lbl.setText("");
        lblCurrDB.setText("Current database : Please select a database");
        tblResult.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        if (c != null) {
            try {
                //get Databases;

                DefaultMutableTreeNode root = new DefaultMutableTreeNode("Databases");
                ResultSet r = c.createStatement().executeQuery("show databases");
                while (r.next()) {

                    String db = r.getString("database");
                    DefaultMutableTreeNode d = new DefaultMutableTreeNode(db);
                    c.createStatement().executeUpdate("use " + db);
                    ResultSet r1 = c.createStatement().executeQuery("show tables");
                    while (r1.next()) {
                        String tbl = "Tables_in_" + db;
                        DefaultMutableTreeNode table = new DefaultMutableTreeNode(r1.getString(tbl));
                        d.add(table);
                    }
                    root.add(d);
                    DBServer.setModel(new DefaultTreeModel(root));
                }
            } catch (SQLException ex) {
                lbl.setText(ex.toString().split(":")[1].trim());
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DBServer = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtSQL = new javax.swing.JTextPane();
        cmbExecute = new javax.swing.JButton();
        lbl = new javax.swing.JLabel();
        lblCurrDB = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SQL Monitor v1.0");
        setIconImage(Toolkit.getDefaultToolkit().getImage(
            Home.class.getResource("Icon.png")));

    DBServer.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            DBServerMouseReleased(evt);
        }
    });
    DBServer.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            DBServerKeyPressed(evt);
        }
    });
    jScrollPane1.setViewportView(DBServer);

    jScrollPane2.setViewportView(txtSQL);

    cmbExecute.setText("Execute");
    cmbExecute.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbExecuteActionPerformed(evt);
        }
    });

    lbl.setText("lblStatus");

    lblCurrDB.setText("lblCurrDB");

    tblResult.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
    ));
    tblResult.setColumnSelectionAllowed(true);
    jScrollPane3.setViewportView(tblResult);
    tblResult.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbExecute))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)))
                .addComponent(lblCurrDB, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lblCurrDB)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbExecute, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExecuteActionPerformed

        String sql = txtSQL.getText();
        if (sql.equals("who did this")) {
            JOptionPane.showMessageDialog(null, "Author : Rumesh Eranga Hapuarachchi\nDJClans\nUniversity of Colombo School of Computing","SQL Monitor",1);
        } else {
            String[] a = sql.split(";");
            for (int i = 0; i < a.length; i++) {
                System.out.println("Executing : " + a[i]);
                execute(a[i]);

            }
        }
        //


    }//GEN-LAST:event_cmbExecuteActionPerformed

    private void DBServerMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DBServerMouseReleased
        String path = DBServer.getSelectionPath().toString();
        path = path.substring(1, path.length() - 1);
        System.out.println(path);
        String[] items = path.split(",");
        for (int i = 0; i < items.length; i++) {
            items[i] = items[i].trim();
        }
        if (items.length > 1) {
            String db = items[1];
            try {
                c.createStatement().execute("use " + db);
                lblCurrDB.setText("Current Database : " + db);
            } catch (SQLException ex) {
                lbl.setText(ex.toString().split(":")[1].trim());
            }
        }
    }//GEN-LAST:event_DBServerMouseReleased

    private void DBServerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DBServerKeyPressed
        if (evt.getExtendedKeyCode() == 10) {
            String path = DBServer.getSelectionPath().toString();
            path = path.substring(1, path.length() - 1);
            System.out.println(path);
            String[] items = path.split(",");
            for (int i = 0; i < items.length; i++) {
                items[i] = items[i].trim();
            }
            if (items.length == 3) {
                String db = items[1];
                try {
                    c.createStatement().execute("use " + db);
                    lblCurrDB.setText("Current Database : " + db);
                    txtSQL.setText("SELECT * FROM " + db + "." + items[2]);
                    cmbExecuteActionPerformed(null);
                } catch (SQLException ex) {
                    lbl.setText(ex.toString().split(":")[1].trim());
                }
            } else if (items.length == 2) {
                try {
                    txtSQL.setText("");
                    c.createStatement().execute("use " + items[1]);
                    lblCurrDB.setText("Current Database : " + items[1]);
                } catch (SQLException ex) {
                    lbl.setText(ex.toString().split(":")[1].trim());
                }
            }
        }
    }//GEN-LAST:event_DBServerKeyPressed

    private void execute(String sql) {
        try {
            if (sql.toLowerCase().startsWith("create")
                    || sql.toLowerCase().startsWith("drop")
                    || sql.toLowerCase().startsWith("alter")
                    || sql.toLowerCase().startsWith("use")
                    || sql.toLowerCase().startsWith("insert")
                    || sql.toLowerCase().startsWith("update")
                    || sql.toLowerCase().startsWith("delete")
                    || sql.toLowerCase().startsWith("drop")) {


                Statement s = c.createStatement();
                s.executeUpdate(sql);
                System.out.println(s.getWarnings());


                DefaultTableModel dft = (DefaultTableModel) tblResult.getModel();
                int rows = dft.getRowCount();
                int columns = dft.getColumnCount();

                for (int i = 0; i < rows; i++) {
                    dft.removeRow(0);
                }
                for (int i = 0; i < columns; i++) {
                    TableColumn t = tblResult.getColumnModel().getColumn(0);
                    tblResult.removeColumn(t);
                }

                lbl.setText("Command executed successfully");

            } else {

                ResultSet r = c.createStatement().executeQuery(sql);
                ResultSetMetaData md = r.getMetaData();
                int i = md.getColumnCount();
                System.out.println(i);
                DefaultTableModel dft = new DefaultTableModel();

                for (int j = 1; j < i + 1; j++) {

                    String n = md.getColumnName(j);
                    System.out.println(n);
                    dft.addColumn(n);
                }

                int row = r.getRow();
                while (r.next()) {
                    Vector v = new Vector();
                    for (int k = 1; k < i + 1; k++) {
                        v.add(r.getString(k));
                    }

                    dft.addRow(v);
                }
                tblResult.setModel(dft);
                lbl.setText("Command executed successfully");
            }
        } catch (SQLException ex) {
            lbl.setText(ex.toString().split(":")[1].trim());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Home().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree DBServer;
    private javax.swing.JButton cmbExecute;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblCurrDB;
    private javax.swing.JTable tblResult;
    private javax.swing.JTextPane txtSQL;
    // End of variables declaration//GEN-END:variables
}
